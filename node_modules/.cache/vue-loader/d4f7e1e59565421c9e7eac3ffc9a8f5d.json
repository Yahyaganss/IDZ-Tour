{"remainingRequest":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yahyazackys/Dev/frontend/idz/src/views/LandingPage.vue?vue&type=template&id=1c0d9c08&","dependencies":[{"path":"/Users/yahyazackys/Dev/frontend/idz/src/views/LandingPage.vue","mtime":1649298538718},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js","mtime":1644720874572},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644720857545},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js","mtime":1644720874572},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/index.js","mtime":1644720857509}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IGlkOiAiTGFuZGluZ1BhZ2UiIH0gfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgIm5hdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJuYXZiYXIgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctdHJhbnNwYXJlbnQgbmF2LTEiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2ZhZWZlYiIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi8iIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNXJlbSIsIGhlaWdodDogImF1dG8iIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2xvZ28vbG9nby5wbmciKSwgYWx0OiAiIiB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcGRvd24gbGFuZ3VhbmdlIG1sLTUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tbWVudSBwLTAgbXQtMiBsYW5ndWFuZ2UtbWVudSIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiOTAlIiwKICAgICAgICAgICAgICAgICAgICAgICJib3JkZXItcmFkaXVzIjogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IjogIjEycHgiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1sYWJlbGxlZGJ5IjogImRyb3Bkb3duTWVudUJ1dHRvbiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLWl0ZW0gYWN0aXZlIGluZG8iLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICJncmV5IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0bzogIi8iIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJCYWhhc2EgSW5kb25lc2lhIildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24taXRlbSBpbmdncmlzIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQmFoYXNhIEluZ2dyaXMiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9yZWdpc3RlciIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tZGFuZ2VyIiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiMjBweCIsCiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAiN3B4IDIwcHgiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1yaWdodCI6ICIxMHB4IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgQnVhdCBBa3VuICIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvbG9naW4iIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICIyMHB4IiwKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICI3cHggMTVweCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiIE1hc3VrICIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWZpeGVkIiB9LCBbCiAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgIF9jKAogICAgICAgICAgIm5hdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICJuYXZiYXIgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctdHJhbnNwYXJlbnQgbmF2LTMiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJuYXZiYXJTdXBwb3J0ZWRDb250ZW50IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLW5hdiBtci1hdXRvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIGFjdGl2ZSIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyB0bzogIi8iIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJCZXJhbmRhIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgdG86ICIvYmVyaXRhIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQmVyaXRhIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gZHJvcGRvd24iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICIjIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAibmF2YmFyRHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS10b2dnbGUiOiAiZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1leHBhbmRlZCI6ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBMYXlhbmFuICIpXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tbWVudSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWxsZWRieSI6ICJuYXZiYXJEcm9wZG93biIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0bzogIi9yZXBvcnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQZW5nYWR1YW4iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIktyaXRpayAmIFNhcmFuIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIGRyb3Bkb3duIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBkcm9wZG93bi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogIm5hdmJhckRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogImRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWhhc3BvcHVwIjogInRydWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtZXhwYW5kZWQiOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgUmFnYW0gS2hhcyAiKV0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLW1lbnUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsbGVkYnkiOiAibmF2YmFyRHJvcGRvd24iIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkcm9wZG93bi1pdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvbWFrYW5hbi1raGFzLXBhbGVtYmFuZyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1ha2FuYW4gS2hhcyIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0bzogIi9iYW5ndW5hbi1zZWphcmFoIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQmFuZ3VuYW4gU2VqYXJhaCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24taXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VuaSBCdWRheWEiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gZHJvcGRvd24iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICIjIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAibmF2YmFyRHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS10b2dnbGUiOiAiZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1leHBhbmRlZCI6ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBQcm9maWxlICIpXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tbWVudSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWxsZWRieSI6ICJuYXZiYXJEcm9wZG93biIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24taXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU3RydWt0dXIgUGVtZXJpbnRhaCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0bzogIi9zZWphcmFoLXBhbGVtYmFuZyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNlamFyYWggUGFsZW1iYW5nIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfdm0uX20oNCkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0pLAogICAgICBfdm0uX20oNSksCiAgICAgIF9jKCJjZW50ZXIiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbCBzbGlkZSBzbGlkZXIiLAogICAgICAgICAgICBhdHRyczogeyBpZDogImNhcm91c2VsRXhhbXBsZUNhcHRpb25zIiwgImRhdGEtcmlkZSI6ICJjYXJvdXNlbCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNDbGFzczogImNhcm91c2VsLWluZGljYXRvcnMiIH0sIFsKICAgICAgICAgICAgICBfYygibGkiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFjdGl2ZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUNhcHRpb25zIiwKICAgICAgICAgICAgICAgICAgImRhdGEtc2xpZGUtdG8iOiAiMCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygibGkiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUNhcHRpb25zIiwKICAgICAgICAgICAgICAgICAgImRhdGEtc2xpZGUtdG8iOiAiMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygibGkiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUNhcHRpb25zIiwKICAgICAgICAgICAgICAgICAgImRhdGEtc2xpZGUtdG8iOiAiMiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1pbm5lciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaXRlbSBhY3RpdmUiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmFubmVyIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvYmFubmVyMS5qcGVnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1jYXB0aW9uIGQtbm9uZSBkLW1kLWJsb2NrIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiQmVyc2FtYSBLaXRhIEJpc2EgSGFkYXBpIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJDT1ZJRCAxOSIpXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWJsb2NrIGJhbm5lciIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL2Jhbm5lcjEuanBlZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtY2FwdGlvbiBkLW5vbmUgZC1tZC1ibG9jayIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIlNlY29uZCBzbGlkZSBsYWJlbCIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgU29tZSByZXByZXNlbnRhdGl2ZSBwbGFjZWhvbGRlciBjb250ZW50IGZvciB0aGUgc2Vjb25kIHNsaWRlLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWJsb2NrIGJhbm5lciIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL2Jhbm5lcjEuanBlZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtY2FwdGlvbiBkLW5vbmUgZC1tZC1ibG9jayIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIlRoaXJkIHNsaWRlIGxhYmVsIildKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBTb21lIHJlcHJlc2VudGF0aXZlIHBsYWNlaG9sZGVyIGNvbnRlbnQgZm9yIHRoZSB0aGlyZCBzbGlkZS4gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1jb250cm9sLXByZXYiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAidHJhbnNwYXJlbnQiLAogICAgICAgICAgICAgICAgICBib3JkZXI6ICIwIiwKICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgImRhdGEtdGFyZ2V0IjogIiNjYXJvdXNlbEV4YW1wbGVDYXB0aW9ucyIsCiAgICAgICAgICAgICAgICAgICJkYXRhLXNsaWRlIjogInByZXYiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNyLW9ubHkiIH0sIFtfdm0uX3YoIlByZXZpb3VzIildKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1jb250cm9sLW5leHQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAidHJhbnNwYXJlbnQiLCBib3JkZXI6ICIwIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICJkYXRhLXRhcmdldCI6ICIjY2Fyb3VzZWxFeGFtcGxlQ2FwdGlvbnMiLAogICAgICAgICAgICAgICAgICAiZGF0YS1zbGlkZSI6ICJuZXh0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24iLAogICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbX3ZtLl92KCJOZXh0IildKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICI3MHB4IiwgIm1hcmdpbi1sZWZ0IjogIjM1cHgiIH0gfSwKICAgICAgICBbX3ZtLl92KCJCZXJpdGEgVGVyYmFydSIpXQogICAgICApLAogICAgICBfdm0uX20oNiksCiAgICAgIF92bS5fbSg3KSwKICAgICAgX2MoImNvcm9uYS12YWtzaW4tZnVsbCIpLAogICAgICBfYygiRm9vdGVyIikKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImJ1dHRvbiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tbGlnaHQgZHJvcGRvd24tdG9nZ2xlIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYm9yZGVyLXJhZGl1cyI6ICIyMHB4IiwgcGFkZGluZzogIjdweCAyNXB4IiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgIGlkOiAiZHJvcGRvd25NZW51QnV0dG9uIiwKICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJkcm9wZG93biIsCiAgICAgICAgICAiYXJpYS1oYXNwb3B1cCI6ICJ0cnVlIiwKICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhLXNvbGlkIGZhLWdsb2JlIiB9KSwKICAgICAgICBfdm0uX3YoIiBCYWhhc2EgSW5kb25lc2lhICIpCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UganVzdGlmeS1jb250ZW50LWNlbnRlciIsCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJuYXZiYXJUZXh0IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJzcGFuIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZiYXItdGV4dCIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogImJvbGQiLAogICAgICAgICAgICAgIGNvbG9yOiAiYmxhY2siLAogICAgICAgICAgICAgICJmb250LXNpemUiOiAiMThweCIsCiAgICAgICAgICAgICAgImZvbnQtc3R5bGUiOiAiaXRhbGljIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIEFwbGlrYXNpIFdlYnNpdGUgUmVzbWkgVGVydXBkYXRlIGRhbiBUZXJwZXJjYXlhICIpXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgIm5hdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBuYXYtMiBiZy10cmFuc3BhcmVudCIKICAgICAgfSwKICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9KV0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LCBbCiAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhLXNvbGlkIGZhLWNpcmNsZS1leGNsYW1hdGlvbiIgfSksCiAgICAgICAgX3ZtLl92KCJVcGRhdGUgQ29yb25hIFZpcnVzIikKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VhcmNoIiB9LCBbCiAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCBtci1zbS0yIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgdHlwZTogInNlYXJjaCIsCiAgICAgICAgICBwbGFjZWhvbGRlcjogIlBlbmNhcmlhbi4uLiIsCiAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJTZWFyY2giCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX2MoImkiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmYS1zb2xpZCBmYS1tYWduaWZ5aW5nLWdsYXNzIiwKICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJIZXJvU2VjdGlvbiIgfSB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctNCB0ZXh0LWhlcm8tc2VjdGlvbiIgfSwgWwogICAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogIndoaXRlIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJJbmZvcm1hc2kgUmVzbWkgS290YSBQYWxlbWJhbmcuIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAid2hpdGUiIH0gfSwgWwogICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIklEWi1OZXdzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgZGFuZGFiaGRhZGphZG1hbmRiamFkYWRoYWJkYW5kYWRqIGlhb2RoYWRhc21kYW5kamFkYTFqZHNhZGpiYXNkbWFza21kYXNkYmFkIGFzZGthc2RhZGFuc2RhICIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL21vbnBlcmEucG5nIiksIGFsdDogIiIgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjk3JSIgfSB9LAogICAgICBbCiAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImNzLWhpZGRlbiIsIGF0dHJzOiB7IGlkOiAiYXV0b1dpZHRoIiB9IH0sIFsKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWEiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWMiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWUiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWYiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWciIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWgiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImRhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJLYW1pcywgMDMgTWFyZXQgMjAyMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJnYWxlcnkiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgbGVmdDogIjAiLAogICAgICAgICAgaGVpZ2h0OiAiOTAlIiwKICAgICAgICAgICJtYXJnaW4tdG9wIjogIi0yNXB4IgogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1hZ2VzL2FtcGVyYS1uaWdodC5wbmciKSwgYWx0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygiaDMiLCBbX3ZtLl92KCJHYWxlcmkgRm90byIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctNiBsZWZ0IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsIHNsaWRlIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaWQ6ICJjYXJvdXNlbEV4YW1wbGVJbmRpY2F0b3JzIiwKICAgICAgICAgICAgICAgICJkYXRhLXJpZGUiOiAiY2Fyb3VzZWwiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNDbGFzczogImNhcm91c2VsLWluZGljYXRvcnMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUluZGljYXRvcnMiLAogICAgICAgICAgICAgICAgICAgICJkYXRhLXNsaWRlLXRvIjogIjAiLAogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIxNTBweCIgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUluZGljYXRvcnMiLAogICAgICAgICAgICAgICAgICAgICJkYXRhLXNsaWRlLXRvIjogIjEiLAogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIzMDBweCIgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI2Nhcm91c2VsRXhhbXBsZUluZGljYXRvcnMiLAogICAgICAgICAgICAgICAgICAgICJkYXRhLXNsaWRlLXRvIjogIjIiLAogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9jb3JvbmEucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaW5uZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaXRlbSBhY3RpdmUgY2FyZC11cCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZC1ibG9jayB3LTEwMCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9iYW5uZXIxLmpwZWciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2MtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJvZGphamRhb2pkIildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcm91c2VsLWl0ZW0gY2FyZC11cCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZC1ibG9jayB3LTEwMCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9iYW5uZXIxLmpwZWciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2MtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJvZGphamRhb2pkIildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcm91c2VsLWl0ZW0gY2FyZC11cCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZC1ibG9jayB3LTEwMCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9iYW5uZXIxLmpwZWciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2MtaW1hZ2UiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJvZGphamRhb2pkIildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsLWNvbnRyb2wtcHJldiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgImRhdGEtdGFyZ2V0IjogIiNjYXJvdXNlbEV4YW1wbGVJbmRpY2F0b3JzIiwKICAgICAgICAgICAgICAgICAgICAiZGF0YS1zbGlkZSI6ICJwcmV2IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic3Itb25seSIgfSwgW192bS5fdigiUHJldmlvdXMiKV0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsLWNvbnRyb2wtbmV4dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgImRhdGEtdGFyZ2V0IjogIiNjYXJvdXNlbEV4YW1wbGVJbmRpY2F0b3JzIiwKICAgICAgICAgICAgICAgICAgICAiZGF0YS1zbGlkZSI6ICJuZXh0IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic3Itb25seSIgfSwgW192bS5fdigiTmV4dCIpXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy02IHJpZ2h0IiB9LCBbCiAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCIjUGVkdWxpTGluZ2t1bmdhbiIpXSksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvYmFubmVyMS5qcGVnIiksIGFsdDogIiIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRlc2MtcGVkdWxpbGluZ2t1bmdhbiIgfSwgWwogICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJkb2phb2RqYWRmYS1mbGlwLWhvcml6b250YWwiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}