{"remainingRequest":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yahyazackys/Dev/frontend/idz/src/views/PalembangHistory.vue?vue&type=template&id=092da093&","dependencies":[{"path":"/Users/yahyazackys/Dev/frontend/idz/src/views/PalembangHistory.vue","mtime":1647234644345},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js","mtime":1644720874572},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644720857545},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/cache-loader/dist/cjs.js","mtime":1644720874572},{"path":"/Users/yahyazackys/Dev/frontend/idz/node_modules/vue-loader/lib/index.js","mtime":1644720857509}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}